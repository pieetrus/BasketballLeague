// <auto-generated />
using System;
using BasketballLeague.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BasketballLeague.Persistence.Migrations
{
    [DbContext(typeof(BasketballLeagueDbContext))]
    [Migration("20200909145203_INIT")]
    partial class INIT
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BasketballLeague.Domain.Entities.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(300)")
                        .HasMaxLength(300);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(35)")
                        .HasMaxLength(35);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("PlayerId")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("PlayerId")
                        .IsUnique()
                        .HasFilter("[PlayerId] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("BasketballLeague.Domain.Entities.Assist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Assist_ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("FreeThrowId")
                        .HasColumnName("Free_Throw_ID")
                        .HasColumnType("int");

                    b.Property<int>("PlayerId")
                        .HasColumnName("Player_ID")
                        .HasColumnType("int");

                    b.Property<int?>("ShotId")
                        .HasColumnName("Shot_ID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FreeThrowId")
                        .IsUnique()
                        .HasFilter("[Free_Throw_ID] IS NOT NULL");

                    b.HasIndex("PlayerId");

                    b.HasIndex("ShotId")
                        .IsUnique()
                        .HasName("UQ_Assist_Shot_ID")
                        .HasFilter("[Shot_ID] IS NOT NULL");

                    b.ToTable("Assist");
                });

            modelBuilder.Entity("BasketballLeague.Domain.Entities.Block", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Block_ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PlayerId")
                        .HasColumnName("Player_ID")
                        .HasColumnType("int");

                    b.Property<int>("ShotId")
                        .HasColumnName("Shot_ID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.HasIndex("ShotId")
                        .IsUnique()
                        .HasName("UQ_Block_Shot_ID");

                    b.ToTable("Block");
                });

            modelBuilder.Entity("BasketballLeague.Domain.Entities.Coach", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Coach_ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Birthdate")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("PhotoUrl")
                        .HasColumnName("Photo_URL")
                        .HasColumnType("varchar(300)")
                        .HasMaxLength(300)
                        .IsUnicode(false);

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.ToTable("Coach");
                });

            modelBuilder.Entity("BasketballLeague.Domain.Entities.Division", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Division_ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnName("Short_Name")
                        .HasColumnType("nvarchar(6)")
                        .HasMaxLength(6);

                    b.HasKey("Id");

                    b.ToTable("Division");
                });

            modelBuilder.Entity("BasketballLeague.Domain.Entities.Foul", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Foul_ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CoachId")
                        .HasColumnName("Coach_ID")
                        .HasColumnType("int");

                    b.Property<int>("FoulType")
                        .HasColumnName("Foul_Type")
                        .HasColumnType("int");

                    b.Property<int>("IncidentId")
                        .HasColumnName("Incident_ID")
                        .HasColumnType("int");

                    b.Property<int?>("PlayerWhoFouledId")
                        .HasColumnName("Player_Who_Fouled_ID")
                        .HasColumnType("int");

                    b.Property<int?>("PlayerWhoWasFouledId")
                        .HasColumnName("Player_Who_Was_Fouled_ID")
                        .HasColumnType("int");

                    b.Property<int?>("TeamId")
                        .HasColumnName("Team_ID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CoachId");

                    b.HasIndex("IncidentId")
                        .IsUnique()
                        .HasName("UQ_Foul_Incident_ID");

                    b.HasIndex("PlayerWhoFouledId");

                    b.HasIndex("PlayerWhoWasFouledId");

                    b.HasIndex("TeamId");

                    b.ToTable("Foul");
                });

            modelBuilder.Entity("BasketballLeague.Domain.Entities.FreeThrow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Free_Throw_ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccurateShots")
                        .HasColumnType("int");

                    b.Property<int>("Attempts")
                        .HasColumnType("int");

                    b.Property<int>("FoulId")
                        .HasColumnName("Foul_ID")
                        .HasColumnType("int");

                    b.Property<int>("PlayerShooterId")
                        .HasColumnName("Player_Shooter_ID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FoulId");

                    b.HasIndex("PlayerShooterId");

                    b.ToTable("Free_Throw");
                });

            modelBuilder.Entity("BasketballLeague.Domain.Entities.Incident", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Incident_ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Flagged")
                        .HasColumnType("bit");

                    b.Property<int>("IncidentType")
                        .HasColumnName("Incident_type")
                        .HasColumnType("int");

                    b.Property<int>("MatchId")
                        .HasColumnName("Match_ID")
                        .HasColumnType("int");

                    b.Property<string>("Minutes")
                        .IsRequired()
                        .HasColumnType("char(2)")
                        .IsFixedLength(true)
                        .HasMaxLength(2)
                        .IsUnicode(false);

                    b.Property<int>("Quater")
                        .HasColumnType("int");

                    b.Property<string>("Seconds")
                        .IsRequired()
                        .HasColumnType("char(2)")
                        .IsFixedLength(true)
                        .HasMaxLength(2)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("MatchId");

                    b.ToTable("Incident");
                });

            modelBuilder.Entity("BasketballLeague.Domain.Entities.JumpBall", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Jump_Ball_ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IncidentId")
                        .HasColumnName("Incident_ID")
                        .HasColumnType("int");

                    b.Property<int>("JumpBallType")
                        .HasColumnName("Jump_Ball_Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IncidentId")
                        .IsUnique();

                    b.ToTable("Jump_Ball");
                });

            modelBuilder.Entity("BasketballLeague.Domain.Entities.Match", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Match_ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Attendance")
                        .HasColumnType("int");

                    b.Property<bool>("Ended")
                        .HasColumnType("bit");

                    b.Property<int>("SeasonDivisionId")
                        .HasColumnName("Season_Division_ID")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnName("Start_Date")
                        .HasColumnType("smalldatetime");

                    b.Property<int?>("TeamGuestId")
                        .HasColumnName("Team_Guest_ID")
                        .HasColumnType("int");

                    b.Property<int?>("TeamHomeId")
                        .HasColumnName("Team_Home_ID")
                        .HasColumnType("int");

                    b.Property<int>("TeamSeasonGuestId")
                        .HasColumnType("int");

                    b.Property<int>("TeamSeasonHomeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SeasonDivisionId");

                    b.HasIndex("TeamGuestId")
                        .IsUnique()
                        .HasFilter("[Team_Guest_ID] IS NOT NULL");

                    b.HasIndex("TeamHomeId")
                        .IsUnique()
                        .HasFilter("[Team_Home_ID] IS NOT NULL");

                    b.ToTable("Match");
                });

            modelBuilder.Entity("BasketballLeague.Domain.Entities.Photo", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AppUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsMain")
                        .HasColumnType("bit");

                    b.Property<int?>("TeamId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("TeamId")
                        .IsUnique()
                        .HasFilter("[TeamId] IS NOT NULL");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("BasketballLeague.Domain.Entities.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Player_ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Birthdate")
                        .HasColumnType("date");

                    b.Property<int?>("Height")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("PhotoUrl")
                        .HasColumnName("Photo_URL")
                        .HasColumnType("varchar(300)")
                        .HasMaxLength(300)
                        .IsUnicode(false);

                    b.Property<int?>("Position")
                        .HasColumnType("int");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.ToTable("Player");
                });

            modelBuilder.Entity("BasketballLeague.Domain.Entities.PlayerMatch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Player_Match_ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Ast")
                        .HasColumnName("AST")
                        .HasColumnType("int");

                    b.Property<int>("Blk")
                        .HasColumnName("BLK")
                        .HasColumnType("int");

                    b.Property<int>("Drb")
                        .HasColumnName("DRB")
                        .HasColumnType("int");

                    b.Property<int>("Fg2a")
                        .HasColumnName("FG2A")
                        .HasColumnType("int");

                    b.Property<int>("Fg2m")
                        .HasColumnName("FG2M")
                        .HasColumnType("int");

                    b.Property<int>("Fg3a")
                        .HasColumnName("FG3A")
                        .HasColumnType("int");

                    b.Property<int>("Fg3m")
                        .HasColumnName("FG3M")
                        .HasColumnType("int");

                    b.Property<int?>("Fga")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("FGA")
                        .HasColumnType("int")
                        .HasComputedColumnSql("([FG3A]+[FG2A])");

                    b.Property<int?>("Fgm")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("FGM")
                        .HasColumnType("int")
                        .HasComputedColumnSql("([FG3M]+[FG2M])");

                    b.Property<int>("Fouls")
                        .HasColumnName("FOULS")
                        .HasColumnType("int");

                    b.Property<int>("Fta")
                        .HasColumnName("FTA")
                        .HasColumnType("int");

                    b.Property<int>("Ftm")
                        .HasColumnName("FTM")
                        .HasColumnType("int");

                    b.Property<int>("MatchId")
                        .HasColumnName("Match_ID")
                        .HasColumnType("int");

                    b.Property<int>("OffFouls")
                        .HasColumnName("OFF_FOULS")
                        .HasColumnType("int");

                    b.Property<int>("Orb")
                        .HasColumnName("ORB")
                        .HasColumnType("int");

                    b.Property<int>("PlayerId")
                        .HasColumnName("Player_ID")
                        .HasColumnType("int");

                    b.Property<int?>("Pts")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("PTS")
                        .HasColumnType("int")
                        .HasComputedColumnSql("(((2)*[FG2M]+(3)*[FG3M])+[FTM])");

                    b.Property<int>("Stl")
                        .HasColumnName("STL")
                        .HasColumnType("int");

                    b.Property<int>("Tov")
                        .HasColumnName("TOV")
                        .HasColumnType("int");

                    b.Property<int?>("Trb")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("TRB")
                        .HasColumnType("int")
                        .HasComputedColumnSql("([ORB]+[DRB])");

                    b.HasKey("Id");

                    b.HasIndex("MatchId");

                    b.HasIndex("PlayerId", "MatchId")
                        .IsUnique()
                        .HasName("UQ_Player_Match_Player_ID_Match_ID");

                    b.ToTable("Player_Match");
                });

            modelBuilder.Entity("BasketballLeague.Domain.Entities.PlayerSeason", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Player_Season")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Ast")
                        .HasColumnName("AST")
                        .HasColumnType("int");

                    b.Property<int>("Blk")
                        .HasColumnName("BLK")
                        .HasColumnType("int");

                    b.Property<int>("Drb")
                        .HasColumnName("DRB")
                        .HasColumnType("int");

                    b.Property<int>("Fg2a")
                        .HasColumnName("FG2A")
                        .HasColumnType("int");

                    b.Property<int>("Fg2m")
                        .HasColumnName("FG2M")
                        .HasColumnType("int");

                    b.Property<int>("Fg3a")
                        .HasColumnName("FG3A")
                        .HasColumnType("int");

                    b.Property<int>("Fg3m")
                        .HasColumnName("FG3M")
                        .HasColumnType("int");

                    b.Property<int?>("Fga")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("FGA")
                        .HasColumnType("int")
                        .HasComputedColumnSql("([FG3A]+[FG2A])");

                    b.Property<int?>("Fgm")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("FGM")
                        .HasColumnType("int")
                        .HasComputedColumnSql("([FG3M]+[FG2M])");

                    b.Property<int>("Fouls")
                        .HasColumnName("FOULS")
                        .HasColumnType("int");

                    b.Property<int>("Fta")
                        .HasColumnName("FTA")
                        .HasColumnType("int");

                    b.Property<int>("Ftm")
                        .HasColumnName("FTM")
                        .HasColumnType("int");

                    b.Property<string>("JerseyNr")
                        .HasColumnName("Jersey_Nr")
                        .HasColumnType("char(2)")
                        .IsFixedLength(true)
                        .HasMaxLength(2)
                        .IsUnicode(false);

                    b.Property<int>("OffFouls")
                        .HasColumnName("OFF_FOULS")
                        .HasColumnType("int");

                    b.Property<int>("Orb")
                        .HasColumnName("ORB")
                        .HasColumnType("int");

                    b.Property<int>("PlayerId")
                        .HasColumnName("Player_ID")
                        .HasColumnType("int");

                    b.Property<int?>("Pts")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("PTS")
                        .HasColumnType("int")
                        .HasComputedColumnSql("(((2)*[FG2M]+(3)*[FG3M])+[FTM])");

                    b.Property<int>("SeasonDivisionId")
                        .HasColumnName("Season_Division_ID")
                        .HasColumnType("int");

                    b.Property<int>("Stl")
                        .HasColumnName("STL")
                        .HasColumnType("int");

                    b.Property<int?>("TeamId")
                        .HasColumnName("Team_ID")
                        .HasColumnType("int");

                    b.Property<int>("Tov")
                        .HasColumnName("TOV")
                        .HasColumnType("int");

                    b.Property<int?>("Trb")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("TRB")
                        .HasColumnType("int")
                        .HasComputedColumnSql("([ORB]+[DRB])");

                    b.HasKey("Id")
                        .HasName("PK_Player_Season_Player_Season_ID");

                    b.HasIndex("PlayerId");

                    b.HasIndex("SeasonDivisionId");

                    b.HasIndex("TeamId");

                    b.ToTable("Player_Season");
                });

            modelBuilder.Entity("BasketballLeague.Domain.Entities.Rebound", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Rebound_ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IncidentId")
                        .HasColumnName("Incident_ID")
                        .HasColumnType("int");

                    b.Property<int?>("PlayerId")
                        .HasColumnName("Player_ID")
                        .HasColumnType("int");

                    b.Property<int>("ReboundType")
                        .HasColumnName("Rebound_Type")
                        .HasColumnType("int");

                    b.Property<int?>("TeamId")
                        .HasColumnName("Team_ID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IncidentId")
                        .IsUnique()
                        .HasName("UQ_Rebound_Incident_ID");

                    b.HasIndex("PlayerId");

                    b.HasIndex("TeamId");

                    b.ToTable("Rebound");
                });

            modelBuilder.Entity("BasketballLeague.Domain.Entities.Referee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Referee_ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Birthdate")
                        .HasColumnType("date");

                    b.Property<string>("JerseyNr")
                        .HasColumnName("Jersey_Nr")
                        .HasColumnType("char(2)")
                        .IsFixedLength(true)
                        .HasMaxLength(2)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("PhotoUrl")
                        .HasColumnName("Photo_URL")
                        .HasColumnType("varchar(300)")
                        .HasMaxLength(300)
                        .IsUnicode(false);

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.ToTable("Referee");
                });

            modelBuilder.Entity("BasketballLeague.Domain.Entities.RefereeMatches", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Referee_ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MatchId")
                        .HasColumnName("Match_ID")
                        .HasColumnType("int");

                    b.HasKey("Id", "MatchId")
                        .HasName("PK_Referee_Matches_Referee_ID_Match_ID");

                    b.HasIndex("MatchId");

                    b.ToTable("Referee_Matches");
                });

            modelBuilder.Entity("BasketballLeague.Domain.Entities.Season", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Season_ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("EndDate")
                        .HasColumnName("End_date")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<DateTime>("StartDate")
                        .HasColumnName("Start_date")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.ToTable("Season");
                });

            modelBuilder.Entity("BasketballLeague.Domain.Entities.SeasonDivision", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Season_Division_ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DivisionId")
                        .HasColumnName("Division_ID")
                        .HasColumnType("int");

                    b.Property<int>("SeasonId")
                        .HasColumnName("Season_ID")
                        .HasColumnType("int");

                    b.Property<int?>("WinnerSeasonDivisionTeamId")
                        .HasColumnName("Winner_Season_Division_Team_ID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DivisionId");

                    b.HasIndex("SeasonId");

                    b.HasIndex("WinnerSeasonDivisionTeamId");

                    b.ToTable("Season_Division");
                });

            modelBuilder.Entity("BasketballLeague.Domain.Entities.Shot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Shot_ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IncidentId")
                        .HasColumnName("Incident_ID")
                        .HasColumnType("int");

                    b.Property<bool>("IsAccurate")
                        .HasColumnName("Is_Accurate")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFastAttack")
                        .HasColumnName("Is_Fast_Attack")
                        .HasColumnType("bit");

                    b.Property<int>("PlayerId")
                        .HasColumnName("Player_ID")
                        .HasColumnType("int");

                    b.Property<int>("ShotType")
                        .HasColumnName("Shot_Type")
                        .HasColumnType("int");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IncidentId")
                        .IsUnique()
                        .HasName("UQ_Shot_Incident_ID");

                    b.HasIndex("PlayerId");

                    b.ToTable("Shot");
                });

            modelBuilder.Entity("BasketballLeague.Domain.Entities.Steal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Steal_ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PlayerId")
                        .HasColumnName("Player_ID")
                        .HasColumnType("int");

                    b.Property<int>("TurnoverId")
                        .HasColumnName("Turnover_ID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.HasIndex("TurnoverId")
                        .IsUnique()
                        .HasName("UQ_Steal_Turnover_ID");

                    b.ToTable("Steal");
                });

            modelBuilder.Entity("BasketballLeague.Domain.Entities.Substitution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Substitution_ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IncidentId")
                        .HasColumnName("Incident_ID")
                        .HasColumnType("int");

                    b.Property<int>("PlayerInId")
                        .HasColumnName("Player_IN_ID")
                        .HasColumnType("int");

                    b.Property<int>("PlayerOutId")
                        .HasColumnName("Player_OUT_ID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IncidentId")
                        .IsUnique()
                        .HasName("UQ_Substitution_Incident_ID");

                    b.HasIndex("PlayerInId");

                    b.HasIndex("PlayerOutId");

                    b.ToTable("Substitution");
                });

            modelBuilder.Entity("BasketballLeague.Domain.Entities.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Team_ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnName("Short_Name")
                        .HasColumnType("char(3)")
                        .IsFixedLength(true)
                        .HasMaxLength(3)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("UQ_Team_Name");

                    b.ToTable("Team");
                });

            modelBuilder.Entity("BasketballLeague.Domain.Entities.TeamMatch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Team_Match_ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Ast")
                        .HasColumnName("AST")
                        .HasColumnType("int");

                    b.Property<int>("BenchPts")
                        .HasColumnName("BENCH_PTS")
                        .HasColumnType("int");

                    b.Property<int>("Blk")
                        .HasColumnName("BLK")
                        .HasColumnType("int");

                    b.Property<int>("Drb")
                        .HasColumnName("DRB")
                        .HasColumnType("int");

                    b.Property<int>("Fastbreakpoints")
                        .HasColumnName("FASTBREAKPOINTS")
                        .HasColumnType("int");

                    b.Property<int>("Fg2a")
                        .HasColumnName("FG2A")
                        .HasColumnType("int");

                    b.Property<int>("Fg2m")
                        .HasColumnName("FG2M")
                        .HasColumnType("int");

                    b.Property<int>("Fg3a")
                        .HasColumnName("FG3A")
                        .HasColumnType("int");

                    b.Property<int>("Fg3m")
                        .HasColumnName("FG3M")
                        .HasColumnType("int");

                    b.Property<int?>("Fga")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("FGA")
                        .HasColumnType("int")
                        .HasComputedColumnSql("([FG3A]+[FG2A])");

                    b.Property<int?>("Fgm")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("FGM")
                        .HasColumnType("int")
                        .HasComputedColumnSql("([FG3M]+[FG2M])");

                    b.Property<int>("Fouls")
                        .HasColumnName("FOULS")
                        .HasColumnType("int");

                    b.Property<int>("Fta")
                        .HasColumnName("FTA")
                        .HasColumnType("int");

                    b.Property<int>("Ftm")
                        .HasColumnName("FTM")
                        .HasColumnType("int");

                    b.Property<int>("OffFouls")
                        .HasColumnName("OFF_FOULS")
                        .HasColumnType("int");

                    b.Property<int>("Orb")
                        .HasColumnName("ORB")
                        .HasColumnType("int");

                    b.Property<int>("PointsFromTurnovers")
                        .HasColumnName("POINTS_FROM_TURNOVERS")
                        .HasColumnType("int");

                    b.Property<int?>("Pts")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("PTS")
                        .HasColumnType("int")
                        .HasComputedColumnSql("(((2)*[FG2M]+(3)*[FG3M])+[FTM])");

                    b.Property<int>("SecondChancePoints")
                        .HasColumnName("SECOND_CHANCE_POINTS")
                        .HasColumnType("int");

                    b.Property<int>("Stl")
                        .HasColumnName("STL")
                        .HasColumnType("int");

                    b.Property<int>("TeamId")
                        .HasColumnName("Team_ID")
                        .HasColumnType("int");

                    b.Property<int>("Tov")
                        .HasColumnName("TOV")
                        .HasColumnType("int");

                    b.Property<int?>("Trb")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("TRB")
                        .HasColumnType("int")
                        .HasComputedColumnSql("([ORB]+[DRB])");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("Team_Match");
                });

            modelBuilder.Entity("BasketballLeague.Domain.Entities.TeamSeason", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Team_Season_ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Ast")
                        .HasColumnName("AST")
                        .HasColumnType("int");

                    b.Property<int>("Blk")
                        .HasColumnName("BLK")
                        .HasColumnType("int");

                    b.Property<int?>("CapitainId")
                        .HasColumnName("Capitain_ID")
                        .HasColumnType("int");

                    b.Property<int?>("CoachId")
                        .HasColumnName("Coach_ID")
                        .HasColumnType("int");

                    b.Property<int>("Drb")
                        .HasColumnName("DRB")
                        .HasColumnType("int");

                    b.Property<int>("Fg2a")
                        .HasColumnName("FG2A")
                        .HasColumnType("int");

                    b.Property<int>("Fg2m")
                        .HasColumnName("FG2M")
                        .HasColumnType("int");

                    b.Property<int>("Fg3a")
                        .HasColumnName("FG3A")
                        .HasColumnType("int");

                    b.Property<int>("Fg3m")
                        .HasColumnName("FG3M")
                        .HasColumnType("int");

                    b.Property<int?>("Fga")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("FGA")
                        .HasColumnType("int")
                        .HasComputedColumnSql("([FG3A]+[FG2A])");

                    b.Property<int?>("Fgm")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("FGM")
                        .HasColumnType("int")
                        .HasComputedColumnSql("([FG3M]+[FG2M])");

                    b.Property<int>("Fouls")
                        .HasColumnName("FOULS")
                        .HasColumnType("int");

                    b.Property<int>("Fta")
                        .HasColumnName("FTA")
                        .HasColumnType("int");

                    b.Property<int>("Ftm")
                        .HasColumnName("FTM")
                        .HasColumnType("int");

                    b.Property<int>("OffFouls")
                        .HasColumnName("OFF_FOULS")
                        .HasColumnType("int");

                    b.Property<int>("Orb")
                        .HasColumnName("ORB")
                        .HasColumnType("int");

                    b.Property<int?>("Pts")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("PTS")
                        .HasColumnType("int")
                        .HasComputedColumnSql("(((2)*[FG2M]+(3)*[FG3M])+[FTM])");

                    b.Property<int>("RankingPoints")
                        .HasColumnName("Ranking_points")
                        .HasColumnType("int");

                    b.Property<int>("SeasonDivisionId")
                        .HasColumnName("Season_Division_ID")
                        .HasColumnType("int");

                    b.Property<int>("Stl")
                        .HasColumnName("STL")
                        .HasColumnType("int");

                    b.Property<int>("TeamId")
                        .HasColumnName("Team_ID")
                        .HasColumnType("int");

                    b.Property<int>("Tov")
                        .HasColumnName("TOV")
                        .HasColumnType("int");

                    b.Property<int?>("Trb")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("TRB")
                        .HasColumnType("int")
                        .HasComputedColumnSql("([ORB]+[DRB])");

                    b.HasKey("Id");

                    b.HasIndex("CapitainId");

                    b.HasIndex("CoachId");

                    b.HasIndex("SeasonDivisionId");

                    b.HasIndex("TeamId", "SeasonDivisionId")
                        .IsUnique()
                        .HasName("UQ_Team_Season_Player_ID_Season_Division_ID");

                    b.ToTable("Team_Season");
                });

            modelBuilder.Entity("BasketballLeague.Domain.Entities.Timeout", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Timeout_ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IncidentId")
                        .HasColumnName("Incident_ID")
                        .HasColumnType("int");

                    b.Property<int>("TeamId")
                        .HasColumnName("Team_ID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IncidentId")
                        .IsUnique()
                        .HasName("UQ_Timeout_Incident_ID");

                    b.HasIndex("TeamId");

                    b.ToTable("Timeout");
                });

            modelBuilder.Entity("BasketballLeague.Domain.Entities.Turnover", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Turnover_ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IncidentId")
                        .HasColumnName("Incident_ID")
                        .HasColumnType("int");

                    b.Property<int>("PlayerId")
                        .HasColumnName("Player_ID")
                        .HasColumnType("int");

                    b.Property<int>("TurnoverType")
                        .HasColumnName("Turnover_Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IncidentId")
                        .IsUnique()
                        .HasName("UQ_Turnover_Incident_ID");

                    b.HasIndex("PlayerId");

                    b.ToTable("Turnover");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("BasketballLeague.Domain.Entities.AppUser", b =>
                {
                    b.HasOne("BasketballLeague.Domain.Entities.Player", "Player")
                        .WithOne("AppUser")
                        .HasForeignKey("BasketballLeague.Domain.Entities.AppUser", "PlayerId")
                        .OnDelete(DeleteBehavior.NoAction);
                });

            modelBuilder.Entity("BasketballLeague.Domain.Entities.Assist", b =>
                {
                    b.HasOne("BasketballLeague.Domain.Entities.FreeThrow", "FreeThrow")
                        .WithOne("Assist")
                        .HasForeignKey("BasketballLeague.Domain.Entities.Assist", "FreeThrowId")
                        .HasConstraintName("FK_Assist_Free_Throw_ID_Free_Throw_Free_Throw_ID");

                    b.HasOne("BasketballLeague.Domain.Entities.Player", "Player")
                        .WithMany("Assists")
                        .HasForeignKey("PlayerId")
                        .HasConstraintName("FK_Assist_Player_ID_Player_Player_ID")
                        .IsRequired();

                    b.HasOne("BasketballLeague.Domain.Entities.Shot", "Shot")
                        .WithOne("Assist")
                        .HasForeignKey("BasketballLeague.Domain.Entities.Assist", "ShotId")
                        .HasConstraintName("FK_Assist_Shot_ID_Shot_Shot_ID");
                });

            modelBuilder.Entity("BasketballLeague.Domain.Entities.Block", b =>
                {
                    b.HasOne("BasketballLeague.Domain.Entities.Player", "Player")
                        .WithMany("Blocks")
                        .HasForeignKey("PlayerId")
                        .HasConstraintName("FK_Block_Player_ID_Player_Player_ID")
                        .IsRequired();

                    b.HasOne("BasketballLeague.Domain.Entities.Shot", "Shot")
                        .WithOne("Block")
                        .HasForeignKey("BasketballLeague.Domain.Entities.Block", "ShotId")
                        .HasConstraintName("FK_Block_Shot_ID_Shot_Shot_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BasketballLeague.Domain.Entities.Foul", b =>
                {
                    b.HasOne("BasketballLeague.Domain.Entities.Coach", "Coach")
                        .WithMany("Foul")
                        .HasForeignKey("CoachId")
                        .HasConstraintName("FK_Foul_Coach_ID_Coach_Coach_ID");

                    b.HasOne("BasketballLeague.Domain.Entities.Incident", "Incident")
                        .WithOne("Foul")
                        .HasForeignKey("BasketballLeague.Domain.Entities.Foul", "IncidentId")
                        .HasConstraintName("FK_Foul_Incident_ID_Incident_Incident_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BasketballLeague.Domain.Entities.Player", "PlayerWhoFouled")
                        .WithMany("Fouls")
                        .HasForeignKey("PlayerWhoFouledId")
                        .HasConstraintName("FK_Foul_Player_Who_Fouled_ID_Player_Player_ID");

                    b.HasOne("BasketballLeague.Domain.Entities.Player", "PlayerWhoWasFouled")
                        .WithMany("FoulsOn")
                        .HasForeignKey("PlayerWhoWasFouledId")
                        .HasConstraintName("FK_Foul_Player_Who_Was_Fouled_ID_Player_Player_ID");

                    b.HasOne("BasketballLeague.Domain.Entities.Team", "Team")
                        .WithMany("BenchFouls")
                        .HasForeignKey("TeamId")
                        .HasConstraintName("FK_Foul_Team_ID_Team_Team_ID");
                });

            modelBuilder.Entity("BasketballLeague.Domain.Entities.FreeThrow", b =>
                {
                    b.HasOne("BasketballLeague.Domain.Entities.Foul", "Foul")
                        .WithMany("FreeThrows")
                        .HasForeignKey("FoulId")
                        .HasConstraintName("FK_Free_Throw_Foul_ID_Foul_Foul_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BasketballLeague.Domain.Entities.Player", "PlayerShooter")
                        .WithMany("FreeThrows")
                        .HasForeignKey("PlayerShooterId")
                        .HasConstraintName("FK_Free_Throw_Player_Shooter_ID_Player_Player_ID")
                        .IsRequired();
                });

            modelBuilder.Entity("BasketballLeague.Domain.Entities.Incident", b =>
                {
                    b.HasOne("BasketballLeague.Domain.Entities.Match", "Match")
                        .WithMany("Incidents")
                        .HasForeignKey("MatchId")
                        .HasConstraintName("FK_Incident_Match_ID_Match_Match_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BasketballLeague.Domain.Entities.JumpBall", b =>
                {
                    b.HasOne("BasketballLeague.Domain.Entities.Incident", "Incident")
                        .WithOne("JumpBall")
                        .HasForeignKey("BasketballLeague.Domain.Entities.JumpBall", "IncidentId")
                        .HasConstraintName("FK_Jump_Ball_Incident_ID_Incident_Incident_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BasketballLeague.Domain.Entities.Match", b =>
                {
                    b.HasOne("BasketballLeague.Domain.Entities.SeasonDivision", "SeasonDivision")
                        .WithMany("Matches")
                        .HasForeignKey("SeasonDivisionId")
                        .HasConstraintName("FK_Match_Season_Division_ID_Season_Division_Season_Division_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BasketballLeague.Domain.Entities.TeamMatch", "TeamGuest")
                        .WithOne("MatchAway")
                        .HasForeignKey("BasketballLeague.Domain.Entities.Match", "TeamGuestId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("BasketballLeague.Domain.Entities.TeamSeason", "TeamSeasonGuest")
                        .WithMany("MatchesAway")
                        .HasForeignKey("TeamGuestId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("BasketballLeague.Domain.Entities.TeamMatch", "TeamHome")
                        .WithOne("MatchHome")
                        .HasForeignKey("BasketballLeague.Domain.Entities.Match", "TeamHomeId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("BasketballLeague.Domain.Entities.TeamSeason", "TeamSeasonHome")
                        .WithMany("MatchesHome")
                        .HasForeignKey("TeamHomeId")
                        .OnDelete(DeleteBehavior.NoAction);
                });

            modelBuilder.Entity("BasketballLeague.Domain.Entities.Photo", b =>
                {
                    b.HasOne("BasketballLeague.Domain.Entities.AppUser", null)
                        .WithMany("Photos")
                        .HasForeignKey("AppUserId");

                    b.HasOne("BasketballLeague.Domain.Entities.Team", "Team")
                        .WithOne("Logo")
                        .HasForeignKey("BasketballLeague.Domain.Entities.Photo", "TeamId");
                });

            modelBuilder.Entity("BasketballLeague.Domain.Entities.PlayerMatch", b =>
                {
                    b.HasOne("BasketballLeague.Domain.Entities.Match", "Match")
                        .WithMany("PlayerMatches")
                        .HasForeignKey("MatchId")
                        .HasConstraintName("FK_Player_Match_Match_ID_Match_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BasketballLeague.Domain.Entities.PlayerSeason", "Player")
                        .WithMany("PlayerMatches")
                        .HasForeignKey("PlayerId")
                        .HasConstraintName("FK_Player_Match_Player_ID_Player_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BasketballLeague.Domain.Entities.PlayerSeason", b =>
                {
                    b.HasOne("BasketballLeague.Domain.Entities.Player", "Player")
                        .WithMany("PlayerSeasons")
                        .HasForeignKey("PlayerId")
                        .HasConstraintName("FK_Player_Season_Player_ID_Player_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BasketballLeague.Domain.Entities.SeasonDivision", "SeasonDivision")
                        .WithMany("PlayerSeasons")
                        .HasForeignKey("SeasonDivisionId")
                        .HasConstraintName("FK_Player_Season_Season_Division_ID_Season_Division_ID")
                        .IsRequired();

                    b.HasOne("BasketballLeague.Domain.Entities.TeamSeason", "Team")
                        .WithMany("Players")
                        .HasForeignKey("TeamId")
                        .HasConstraintName("FK_Player_Season_Team_ID_Season_Team_Team_ID");
                });

            modelBuilder.Entity("BasketballLeague.Domain.Entities.Rebound", b =>
                {
                    b.HasOne("BasketballLeague.Domain.Entities.Incident", "Incident")
                        .WithOne("Rebound")
                        .HasForeignKey("BasketballLeague.Domain.Entities.Rebound", "IncidentId")
                        .HasConstraintName("FK_Rebound_Incident_ID_Incident_Incident_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BasketballLeague.Domain.Entities.Player", "Player")
                        .WithMany("Rebounds")
                        .HasForeignKey("PlayerId")
                        .HasConstraintName("FK_Rebound_Player_ID_Player_Player_ID");

                    b.HasOne("BasketballLeague.Domain.Entities.Team", "Team")
                        .WithMany("Rebounds")
                        .HasForeignKey("TeamId")
                        .HasConstraintName("FK_Rebound_Team_ID_Team_Team_ID");
                });

            modelBuilder.Entity("BasketballLeague.Domain.Entities.RefereeMatches", b =>
                {
                    b.HasOne("BasketballLeague.Domain.Entities.Referee", "Referee")
                        .WithMany("RefereeMatches")
                        .HasForeignKey("Id")
                        .HasConstraintName("FK_Referee_Matches_Referee_ID_Referee_Referee_ID")
                        .IsRequired();

                    b.HasOne("BasketballLeague.Domain.Entities.Match", "Match")
                        .WithMany("RefereeMatches")
                        .HasForeignKey("MatchId")
                        .HasConstraintName("FK_Referee_Matches_Match_ID_Match_Match_ID")
                        .IsRequired();
                });

            modelBuilder.Entity("BasketballLeague.Domain.Entities.SeasonDivision", b =>
                {
                    b.HasOne("BasketballLeague.Domain.Entities.Division", "Division")
                        .WithMany("SeasonDivisions")
                        .HasForeignKey("DivisionId")
                        .HasConstraintName("FK_Season_Division_Division_ID_Division_Division_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BasketballLeague.Domain.Entities.Season", "Season")
                        .WithMany("SeasonDivisions")
                        .HasForeignKey("SeasonId")
                        .HasConstraintName("FK_Season_Division_Season_ID_Season_Season_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BasketballLeague.Domain.Entities.Team", "WinnerSeasonDivisionTeam")
                        .WithMany("SeasonDivisions")
                        .HasForeignKey("WinnerSeasonDivisionTeamId")
                        .HasConstraintName("FK_Winner_Season_Division_Team_Division_ID_Division_Division_ID");
                });

            modelBuilder.Entity("BasketballLeague.Domain.Entities.Shot", b =>
                {
                    b.HasOne("BasketballLeague.Domain.Entities.Incident", "Incident")
                        .WithOne("Shot")
                        .HasForeignKey("BasketballLeague.Domain.Entities.Shot", "IncidentId")
                        .HasConstraintName("FK_Shot_Incident_ID_Incident_Incident_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BasketballLeague.Domain.Entities.Player", "Player")
                        .WithMany("Shots")
                        .HasForeignKey("PlayerId")
                        .HasConstraintName("FK_Shot_Player_ID_Player_Player_ID")
                        .IsRequired();
                });

            modelBuilder.Entity("BasketballLeague.Domain.Entities.Steal", b =>
                {
                    b.HasOne("BasketballLeague.Domain.Entities.Player", "Player")
                        .WithMany("Steals")
                        .HasForeignKey("PlayerId")
                        .HasConstraintName("FK_Steal_Player_ID_Player_Player_ID")
                        .IsRequired();

                    b.HasOne("BasketballLeague.Domain.Entities.Turnover", "Turnover")
                        .WithOne("Steal")
                        .HasForeignKey("BasketballLeague.Domain.Entities.Steal", "TurnoverId")
                        .HasConstraintName("FK_Steal_Turnover_ID_Turnover_Turnover_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BasketballLeague.Domain.Entities.Substitution", b =>
                {
                    b.HasOne("BasketballLeague.Domain.Entities.Incident", "Incident")
                        .WithOne("Substitution")
                        .HasForeignKey("BasketballLeague.Domain.Entities.Substitution", "IncidentId")
                        .HasConstraintName("FK_Substitution_Incident_ID_Incident_Incident_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BasketballLeague.Domain.Entities.Player", "PlayerIn")
                        .WithMany("SubstitutionIn")
                        .HasForeignKey("PlayerInId")
                        .HasConstraintName("FK_Substitution_Player_IN_ID_Player_Player_ID")
                        .IsRequired();

                    b.HasOne("BasketballLeague.Domain.Entities.Player", "PlayerOut")
                        .WithMany("SubstitutionOut")
                        .HasForeignKey("PlayerOutId")
                        .HasConstraintName("FK_Substitution_Player_OUT_ID_Player_Player_ID")
                        .IsRequired();
                });

            modelBuilder.Entity("BasketballLeague.Domain.Entities.TeamMatch", b =>
                {
                    b.HasOne("BasketballLeague.Domain.Entities.Team", "Team")
                        .WithMany("TeamMatches")
                        .HasForeignKey("TeamId")
                        .HasConstraintName("FK_Team_Match_Team_ID_Team_ID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("BasketballLeague.Domain.Entities.TeamSeason", b =>
                {
                    b.HasOne("BasketballLeague.Domain.Entities.Player", "Capitain")
                        .WithMany("TeamSeasons")
                        .HasForeignKey("CapitainId")
                        .HasConstraintName("FK_Team_Season_Capitain_ID_Player_Player_ID");

                    b.HasOne("BasketballLeague.Domain.Entities.Coach", "Coach")
                        .WithMany("TeamSeasons")
                        .HasForeignKey("CoachId")
                        .HasConstraintName("FK_Team_Season_Coach_ID_Coach_Coach_ID");

                    b.HasOne("BasketballLeague.Domain.Entities.SeasonDivision", "SeasonDivision")
                        .WithMany("TeamSeasons")
                        .HasForeignKey("SeasonDivisionId")
                        .HasConstraintName("FK_Team_Season_Season_Division_ID_Season_Division_ID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BasketballLeague.Domain.Entities.Team", "Team")
                        .WithMany("TeamSeasons")
                        .HasForeignKey("TeamId")
                        .HasConstraintName("FK_Team_Season_Team_ID_Team_ID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("BasketballLeague.Domain.Entities.Timeout", b =>
                {
                    b.HasOne("BasketballLeague.Domain.Entities.Incident", "Incident")
                        .WithOne("Timeout")
                        .HasForeignKey("BasketballLeague.Domain.Entities.Timeout", "IncidentId")
                        .HasConstraintName("FK_Timeout_Incident_ID_Incident_Incident_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BasketballLeague.Domain.Entities.Team", "Team")
                        .WithMany("Timeouts")
                        .HasForeignKey("TeamId")
                        .HasConstraintName("FK_Timeout_Team_ID_Team_Team_ID")
                        .IsRequired();
                });

            modelBuilder.Entity("BasketballLeague.Domain.Entities.Turnover", b =>
                {
                    b.HasOne("BasketballLeague.Domain.Entities.Incident", "Incident")
                        .WithOne("Turnover")
                        .HasForeignKey("BasketballLeague.Domain.Entities.Turnover", "IncidentId")
                        .HasConstraintName("FK_Turnover_Incident_ID_Incident_Incident_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BasketballLeague.Domain.Entities.Player", "Player")
                        .WithMany("Turnovers")
                        .HasForeignKey("PlayerId")
                        .HasConstraintName("FK_Turnover_Player_ID_Player_Player_ID")
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BasketballLeague.Domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BasketballLeague.Domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BasketballLeague.Domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BasketballLeague.Domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
